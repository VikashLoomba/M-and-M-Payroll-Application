/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MandM;

import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.regex.Matcher;

/**
 *
 * @author vikashloomba
 */
public class MMGui extends javax.swing.JFrame {

    StringBuffer display = new StringBuffer();
    List<String> names = new ArrayList<String>();
    List<String> nameChanges = new ArrayList<String>();
    List<String> outLines = new ArrayList<String>();
    
    NumberFormat dollars = NumberFormat.getCurrencyInstance();
    double total;
    /**
     * Creates new form MMGui
     */
    public MMGui() 
    {
        initComponents();
        this.setLocationRelativeTo(null);
        //set buttonAdd as default
        this.getRootPane().setDefaultButton(addjButton); 
        populateDepartmentBox();
        populateNameBox();
        
        
    }
    /**
     * Reads Departments.txt and appends to box
     */
    private void populateDepartmentBox() 
    {
        String fileName = "src/MandM/Departments.txt",
                departmentName;
        try
        {
            FileReader fReader = new FileReader(fileName);
            BufferedReader inputFile = new BufferedReader(fReader);
            
            //Read first line and process
            departmentName = inputFile.readLine();
            
            //While the customerName is not blank
            while(departmentName != null) {
                //Reads up to each comma ','
                
                //Populate combobox
                departmentjComboBox.addItem(departmentName);
                departmentName = inputFile.readLine();
        }
            
            inputFile.close();

        }
        catch(FileNotFoundException exp)
        {
            exp.printStackTrace();
        }
        catch(IOException exp)
        {
            exp.printStackTrace();
        }
    }
    /**
     * Reads Employees.txt and appends to box
     */    
    private void populateNameBox() 
    {
        String fileName = "src/MandM/Employees.txt",
                employeeName;
        try
        {
            FileReader fReader = new FileReader(fileName);
            BufferedReader inputFile = new BufferedReader(fReader);
            
            //Read first line and process
            employeeName = inputFile.readLine();
            
            //While the customerName is not blank
            while(employeeName != null) {
                //Reads up to each comma ','
                
                //Populate combobox
                namejComboBox.addItem(employeeName);
                nameChanges.add(employeeName);
                names.add(employeeName);
                employeeName = inputFile.readLine();
        }
            
            inputFile.close();

        }
        catch(FileNotFoundException exp)
        {
            exp.printStackTrace();
        }
        catch(IOException exp)
        {
            exp.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        infojPanel = new javax.swing.JPanel();
        titlejLabel = new javax.swing.JLabel();
        pitcurejLabel = new javax.swing.JLabel();
        buttonsjPanel = new javax.swing.JPanel();
        addjButton = new javax.swing.JButton();
        totaljButton = new javax.swing.JButton();
        printjButton = new javax.swing.JButton();
        clearjButton = new javax.swing.JButton();
        quitjButton = new javax.swing.JButton();
        employeejPanel = new javax.swing.JPanel();
        namejLabel = new javax.swing.JLabel();
        departmentjLabel = new javax.swing.JLabel();
        hoursjLabel = new javax.swing.JLabel();
        departmentjLabel1 = new javax.swing.JLabel();
        searchjButton = new javax.swing.JButton();
        displayjPanel = new javax.swing.JPanel();
        outjScrollPane = new javax.swing.JScrollPane();
        outjTextArea = new javax.swing.JTextArea();
        namejComboBox = new javax.swing.JComboBox();
        dependentsjSpinner = new javax.swing.JSpinner();
        departmentjComboBox = new javax.swing.JComboBox();
        hoursjFormattedTextField = new javax.swing.JFormattedTextField();
        jMenuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        action = new javax.swing.JMenu();
        addjMenuItem = new javax.swing.JMenuItem();
        totaljMenuItem = new javax.swing.JMenuItem();
        printjMenuItem = new javax.swing.JMenuItem();
        clearjMenuItem = new javax.swing.JMenuItem();
        exitjMenu = new javax.swing.JMenu();
        exitjMenuItem = new javax.swing.JMenuItem();
        aboutjMenu = new javax.swing.JMenu();
        aboutjMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("M&M Payroll Application");
        setSize(new java.awt.Dimension(750, 500));

        infojPanel.setPreferredSize(new java.awt.Dimension(750, 110));

        titlejLabel.setFont(new java.awt.Font("Perpetua Titling MT", 1, 18)); // NOI18N
        titlejLabel.setText("M&M Accounting System");
        titlejLabel.setPreferredSize(new java.awt.Dimension(375, 20));

        pitcurejLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/formPic.png"))); // NOI18N

        javax.swing.GroupLayout infojPanelLayout = new javax.swing.GroupLayout(infojPanel);
        infojPanel.setLayout(infojPanelLayout);
        infojPanelLayout.setHorizontalGroup(
            infojPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infojPanelLayout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(titlejLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(pitcurejLabel)
                .addContainerGap(185, Short.MAX_VALUE))
        );
        infojPanelLayout.setVerticalGroup(
            infojPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infojPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(titlejLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(pitcurejLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        buttonsjPanel.setLayout(new java.awt.GridLayout(1, 5, 1, 0));

        addjButton.setText("Add Employee");
        addjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addjButtonActionPerformed(evt);
            }
        });
        buttonsjPanel.add(addjButton);

        totaljButton.setText("Display total");
        totaljButton.setEnabled(false);
        totaljButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totaljButtonActionPerformed(evt);
            }
        });
        buttonsjPanel.add(totaljButton);

        printjButton.setText("Print");
        printjButton.setEnabled(false);
        printjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printjButtonActionPerformed(evt);
            }
        });
        buttonsjPanel.add(printjButton);

        clearjButton.setText("Clear");
        clearjButton.setEnabled(false);
        clearjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearjButtonActionPerformed(evt);
            }
        });
        buttonsjPanel.add(clearjButton);

        quitjButton.setText("Quit");
        quitjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitjButtonActionPerformed(evt);
            }
        });
        buttonsjPanel.add(quitjButton);

        namejLabel.setFont(new java.awt.Font("Lucida Grande", 1, 20)); // NOI18N
        namejLabel.setText("Name");

        departmentjLabel.setFont(new java.awt.Font("Lucida Grande", 1, 20)); // NOI18N
        departmentjLabel.setText("Department");

        hoursjLabel.setFont(new java.awt.Font("Lucida Grande", 1, 20)); // NOI18N
        hoursjLabel.setText("Hours");

        departmentjLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 20)); // NOI18N
        departmentjLabel1.setText("Dependents");

        searchjButton.setText("Search Employee");
        searchjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchjButtonActionPerformed(evt);
            }
        });

        outjScrollPane.setHorizontalScrollBar(null);

        outjTextArea.setEditable(false);
        outjTextArea.setColumns(4);
        outjTextArea.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        outjTextArea.setRows(5);
        outjScrollPane.setViewportView(outjTextArea);

        javax.swing.GroupLayout displayjPanelLayout = new javax.swing.GroupLayout(displayjPanel);
        displayjPanel.setLayout(displayjPanelLayout);
        displayjPanelLayout.setHorizontalGroup(
            displayjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayjPanelLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(outjScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        displayjPanelLayout.setVerticalGroup(
            displayjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayjPanelLayout.createSequentialGroup()
                .addComponent(outjScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        namejComboBox.setPreferredSize(new java.awt.Dimension(62, 25));
        namejComboBox.setSize(new java.awt.Dimension(62, 25));

        dependentsjSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        dependentsjSpinner.setToolTipText("Please select the number of dependents you have.");
        dependentsjSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(dependentsjSpinner, ""));

        departmentjComboBox.setToolTipText("Please select the department.");

        hoursjFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
        hoursjFormattedTextField.setToolTipText("Please enter a valid number");

        javax.swing.GroupLayout employeejPanelLayout = new javax.swing.GroupLayout(employeejPanel);
        employeejPanel.setLayout(employeejPanelLayout);
        employeejPanelLayout.setHorizontalGroup(
            employeejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(employeejPanelLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(employeejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(employeejPanelLayout.createSequentialGroup()
                        .addComponent(departmentjLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(departmentjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(employeejPanelLayout.createSequentialGroup()
                        .addComponent(namejLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(namejComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24)
                .addComponent(hoursjLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(employeejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(employeejPanelLayout.createSequentialGroup()
                        .addComponent(hoursjFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)
                        .addComponent(departmentjLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dependentsjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(searchjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(employeejPanelLayout.createSequentialGroup()
                .addComponent(displayjPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        employeejPanelLayout.setVerticalGroup(
            employeejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(employeejPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(employeejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(namejComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(employeejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(namejLabel)
                        .addComponent(hoursjLabel)
                        .addComponent(departmentjLabel1)
                        .addComponent(dependentsjSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(hoursjFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(employeejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(departmentjLabel)
                    .addComponent(departmentjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(displayjPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenu1.setText("File");
        jMenuBar.add(jMenu1);

        action.setText("Action");

        addjMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        addjMenuItem.setText("Add Employee");
        addjMenuItem.setEnabled(false);
        addjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addjMenuItemActionPerformed(evt);
            }
        });
        action.add(addjMenuItem);

        totaljMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        totaljMenuItem.setText("Display Total");
        totaljMenuItem.setEnabled(false);
        totaljMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totaljMenuItemActionPerformed(evt);
            }
        });
        action.add(totaljMenuItem);

        printjMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        printjMenuItem.setText("Print");
        printjMenuItem.setEnabled(false);
        printjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printjMenuItemActionPerformed(evt);
            }
        });
        action.add(printjMenuItem);

        clearjMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.CTRL_MASK));
        clearjMenuItem.setText("Clear");
        clearjMenuItem.setEnabled(false);
        clearjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearjMenuItemActionPerformed(evt);
            }
        });
        action.add(clearjMenuItem);

        jMenuBar.add(action);

        exitjMenu.setText("Exit");

        exitjMenuItem.setText("Exit");
        exitjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitjMenuItemActionPerformed(evt);
            }
        });
        exitjMenu.add(exitjMenuItem);

        jMenuBar.add(exitjMenu);

        aboutjMenu.setText("About");

        aboutjMenuItem.setText("About");
        aboutjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutjMenuItemActionPerformed(evt);
            }
        });
        aboutjMenu.add(aboutjMenuItem);

        jMenuBar.add(aboutjMenu);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(infojPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonsjPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeejPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(infojPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(employeejPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonsjPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void totaljButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totaljButtonActionPerformed
        // TODO add your handling code here:
        String totalAmount = dollars.format(total);
        outjTextArea.append("-------------------------------------------------------------------------------------------\n");        
        outjTextArea.append(padSpaces("Total", "", "", totalAmount + '\n').toString());
        
        
    }//GEN-LAST:event_totaljButtonActionPerformed

    private void printjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printjButtonActionPerformed

        try {
            outjTextArea.print();
        } 
        catch (PrinterException ex) {
            Logger.getLogger(MMGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_printjButtonActionPerformed

    private void clearjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearjButtonActionPerformed
        // TODO add your handling code here:
        namejComboBox.removeAllItems();
        populateNameBox();
        display.setLength(0);
        namejComboBox.setSelectedIndex(0);
        hoursjFormattedTextField.setText("");
        dependentsjSpinner.setValue(0);
        departmentjComboBox.setSelectedIndex(0);
        outjTextArea.setText("");
       
    }//GEN-LAST:event_clearjButtonActionPerformed

    private void addjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addjButtonActionPerformed

        
        //First check each field for the information that will be passed to payroll class
        String name = namejComboBox.getSelectedItem().toString();
        String depName = departmentjComboBox.getSelectedItem().toString();
        
        if (hoursjFormattedTextField.getText().isEmpty() || 
                Double.parseDouble(hoursjFormattedTextField.getText()) > 168 ||
                Double.parseDouble(hoursjFormattedTextField.getText()) < 0)
        {
            JOptionPane.showMessageDialog(null, "Invalid input. Please try again.");            
            return;
        }
        double hours = Double.parseDouble(hoursjFormattedTextField.getText());
        int dependents = (Integer)dependentsjSpinner.getValue();
        int department = departmentjComboBox.getSelectedIndex() + 1;
        //Gets the hourly rate of selected department
        double departmentHourly = Payroll.getDepartmentHourly(department);

        
        //Call instance of payroll class calculate method to calculate the pay
        Payroll myPay = new Payroll(dependents, hours, department);
        total += myPay.getTotalPay(departmentHourly);
        String totalPay = dollars.format(myPay.getTotalPay(departmentHourly));
        
        
        
        //Displays the information in the outjTextArea
        displayOut(name, depName, hours, totalPay);
        nameChanges.remove(name);
        
       
        //Enable buttons
        totaljButton.setEnabled(true);
        printjButton.setEnabled(true);
        clearjButton.setEnabled(true);
        
        addjMenuItem.setEnabled(true);
        totaljMenuItem.setEnabled(true);
        printjMenuItem.setEnabled(true);
        clearjMenuItem.setEnabled(true);
    }//GEN-LAST:event_addjButtonActionPerformed

    private void quitjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitjButtonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_quitjButtonActionPerformed

    private void searchjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchjButtonActionPerformed
        // TODO add your handling code here:
        String empName = JOptionPane.showInputDialog("Please enter the name of the employee you want to search");
        if (empName.matches(""))
        {
            JOptionPane.showMessageDialog(null, "You have left the field empty, please try again.");
            searchjButton.doClick();
            
        }
        else
        {
            compareName(empName);
        }
        hoursjFormattedTextField.hasFocus();
    }//GEN-LAST:event_searchjButtonActionPerformed

    private void addjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addjMenuItemActionPerformed
        // TODO add your handling code here:
        addjButtonActionPerformed(evt);
        
    }//GEN-LAST:event_addjMenuItemActionPerformed

    private void printjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printjMenuItemActionPerformed
        // TODO add your handling code here:
        printjButtonActionPerformed(evt);
    }//GEN-LAST:event_printjMenuItemActionPerformed

    private void totaljMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totaljMenuItemActionPerformed
        // TODO add your handling code here:
        totaljButtonActionPerformed(evt);
        
    }//GEN-LAST:event_totaljMenuItemActionPerformed

    private void clearjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearjMenuItemActionPerformed
        // TODO add your handling code here:
        clearjButtonActionPerformed(evt);
    }//GEN-LAST:event_clearjMenuItemActionPerformed

    private void exitjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitjMenuItemActionPerformed
        // TODO add your handling code here:
        quitjButtonActionPerformed(evt);
    }//GEN-LAST:event_exitjMenuItemActionPerformed

    private void aboutjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutjMenuItemActionPerformed
        // TODO add your handling code here:
        About aboutWindow = new About();
        aboutWindow.setVisible(true);
    }//GEN-LAST:event_aboutjMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MMGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MMGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MMGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MMGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MMGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aboutjMenu;
    private javax.swing.JMenuItem aboutjMenuItem;
    private javax.swing.JMenu action;
    private javax.swing.JButton addjButton;
    private javax.swing.JMenuItem addjMenuItem;
    private javax.swing.JPanel buttonsjPanel;
    private javax.swing.JButton clearjButton;
    private javax.swing.JMenuItem clearjMenuItem;
    private javax.swing.JComboBox departmentjComboBox;
    private javax.swing.JLabel departmentjLabel;
    private javax.swing.JLabel departmentjLabel1;
    private javax.swing.JSpinner dependentsjSpinner;
    private javax.swing.JPanel displayjPanel;
    private javax.swing.JPanel employeejPanel;
    private javax.swing.JMenu exitjMenu;
    private javax.swing.JMenuItem exitjMenuItem;
    private javax.swing.JFormattedTextField hoursjFormattedTextField;
    private javax.swing.JLabel hoursjLabel;
    private javax.swing.JPanel infojPanel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JComboBox namejComboBox;
    private javax.swing.JLabel namejLabel;
    private javax.swing.JScrollPane outjScrollPane;
    private javax.swing.JTextArea outjTextArea;
    private javax.swing.JLabel pitcurejLabel;
    private javax.swing.JButton printjButton;
    private javax.swing.JMenuItem printjMenuItem;
    private javax.swing.JButton quitjButton;
    private javax.swing.JButton searchjButton;
    private javax.swing.JLabel titlejLabel;
    private javax.swing.JButton totaljButton;
    private javax.swing.JMenuItem totaljMenuItem;
    // End of variables declaration//GEN-END:variables
    //displays the output
    public void displayOut(String name, String departmentName, double hour, String totalPay)
    {        
        String hours = Double.toString(hour);
        int namePos;
        String selectedName;
        String addLine;
        String output = null;
        List<String> lines = outLines;
        String header = padSpaces("Employee", "Department", "Hours", "Net Pay" + '\n').toString() + "--------------------------------------------------------------------------------------------\n";
        //Checks whether the employee has already been added
       
        //Get index to cross reference names
        namePos = namejComboBox.getSelectedIndex();
        //Gets the selected name to compare
        selectedName = namejComboBox.getItemAt(namePos).toString();
        //If the name has already been added to the outjTextArea, execute.
        if (!nameChanges.contains(selectedName))
        {
            int indexStart = Integer.parseInt(JOptionPane.showInputDialog(null, name + " has already been added below. If you would like to edit\n"
                    + " this employees information, please input the line their information\n is printed on (Do not"
                    + " include header!)."));
            lines.remove(indexStart - 1);
            
            lines.add(indexStart - 1, padSpaces(name, departmentName, hours, totalPay + '\n').toString());
            output = arrayToString(lines);
//            output = lines.toString()
//                .replace(", ", "")
//                .replace("[", "")
//                .replace("]", "")
//                .trim();
            JOptionPane.showMessageDialog(null, "The information has been updated.");
        }
        //Else if the name has not been added to the text area
        else
        {
            addLine = padSpaces(name, departmentName, hours, totalPay + '\n').toString();
            lines.add(addLine);
            output = arrayToString(lines);
//          output = lines.toString()            
//                .replace(", ", "")
//                .replace("[", "")
//                .replace("]", "")
//                .trim();
        }
            
            //Sets the header
            outjTextArea.setText(header);
            //Appends the employee information
            outjTextArea.append(output + '\n');
    }
    
    
    //Pads the spacing    
    private StringBuffer padSpaces(String name, String departmentName, String hours, String netPay)
        {
            final int MAX_LENGTH = 93;
            StringBuffer line = new StringBuffer(name);
            int numSpaces = 0;
            
            numSpaces = ((MAX_LENGTH / 2) - name.length()) - departmentName.length();           
            for(int i = 0; i < numSpaces; i++)
            {
                line.append(" ");                 //append the needed spaces
            }           
            line.append(departmentName);

            numSpaces = (((MAX_LENGTH / 2) / 2) - hours.length());
            for(int i = 0; i < numSpaces; i++)
            {
                line.append(" ");                 //append the needed spaces
            }
            line.append(hours);
            numSpaces = ((MAX_LENGTH / 2) / 2) - netPay.length();
            for(int i = 0; i < numSpaces; i++)
            {
                line.append(" ");                 //append the needed spaces
            }
            line.append(netPay);
            
            return line;
        }

    
    private void compareName(String empName) 
    {
        int nameCount = 0;
        String newEmployee;
        nameCount = names.size();
        for(int i = 0; i < nameCount; i++)
        {
            if (names.contains(empName))
            {
                namejComboBox.setSelectedItem(empName);
                JOptionPane.showMessageDialog(null, empName + " has been selected");                
                break;
            }
            else
            {
                int addName = JOptionPane.showConfirmDialog(null, empName + " could not be found, would you like to add them?");
                if (addName == JOptionPane.YES_OPTION)
                {
                    namejComboBox.addItem(empName);
                    names.add(empName);
                    nameChanges.add(empName);
                    JOptionPane.showMessageDialog(null, empName + " has been added.");
                    namejComboBox.setSelectedItem(empName);
                }
                else
                {
                    searchjButton.doClick();
                }
                
                break;
            }
        }
    }

    private String arrayToString(List<String> lines)
    {
        String output = lines.toString()
                .replace(", ", "")
                .replace("[", "")
                .replace("]", "")
                .trim();
        return output;
    }

    


}
